const messaging = firebase.messaging();

messaging.requestPermission()
.then(function() {
  console.log('Notification permission granted.');
  // TODO(developer): Retrieve an Instance ID token for use with FCM.
  // ...
  messaging.getToken()
  .then(function(currentToken) {
    if (currentToken) {
      sendTokenToServer(currentToken);
      // updateUIForPushEnabled(currentToken);
      console.log("current token is " + currentToken);
    } else {
      // Show permission request.
      console.log('No Instance ID token available. Request permission to generate one.');
      // Show permission UI.
      setTokenSentToServer(false);
    }
  })
  .catch(function(err) {
    console.log('An error occurred while retrieving token. ', err);
    showToken('Error retrieving Instance ID token. ', err);
    setTokenSentToServer(false);
  });
})
.catch(function(err) {
  console.log('Unable to get permission to notify.', err);
});


messaging.onTokenRefresh(function() {
  messaging.getToken()
  .then(function(refreshedToken) {
    console.log('Token refreshed.');
    // Indicate that the new Instance ID token has not yet been sent to the
    // app server.
    setTokenSentToServer(false);
    // Send Instance ID token to app server.
    sendTokenToServer(refreshedToken);
    // ...
    console.log("refreshed token is " + refreshedToken);
  })
  .catch(function(err) {
    console.log('Unable to retrieve refreshed token ', err);
    showToken('Unable to retrieve refreshed token ', err);
  });
});

function showToken(message, err){
  console.error(message, err);
}

function sendTokenToServer(token) {
  sessionStorage.setItem('fcm_token', token);
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      console.log(this.responseText)
    }
  }
  var params = "?user_email=" + window.sessionStorage["user_email"] + "&fcm_token=" + token;
  xhttp.open("POST", '<%= "#{Figaro.env.locate_employee_app}/api/v1/" %>fcm/create_tokens_for' + params)
  xhttp.send();
}

function setTokenSentToServer(sent){
  // window.localStorage.setItem('sentToServer', sent ? 1 : 0);
}

messaging.onMessage(function(payload) {
  console.log("Message received. ", payload);
  // ...

  const notificationTitle = payload.notification.title;
        const notificationOptions = {
            body: payload.notification.body,
            icon: payload.notification.icon,
        };
         if (!("Notification" in window)) {
            console.log("This browser does not support system notifications");
        }
        // Let's check whether notification permissions have already been granted
        else if (Notification.permission === "granted") {
        // If it's okay let's create a notification
            var notification = new Notification(notificationTitle,notificationOptions);

            notification.onclick = function(event) {
                event.preventDefault(); // prevent the browser from focusing the Notification's tab
                window.open( payload.notification.click_action , '_blank');
                notification.close();
            }
        }
});
